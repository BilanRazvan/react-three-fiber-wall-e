/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 robot-transformed.glb --transform 
Files: robot-transformed.glb [1.66MB] > /Users/bilanrazvan/Documents/Work/learn-react-three/robot-transformed-transformed.glb [1.61MB] (3%)
*/

import React from 'react'
import { useGLTF } from '@react-three/drei'
import { useRef } from 'react';
import { useFrame } from '@react-three/fiber';

export function Robot(props) {
  const { nodes, materials } = useGLTF('/robot-transformed-transformed.glb')
  nodes.Smile.morphTargetInfluences[0] = 0
  const meshRef = useRef();

  useFrame(({ pointer, viewport, clock }) => {
    const elapsedTime = clock.getElapsedTime();
    const cycleTime = 2; // Blink every X seconds
    const blinkDuration = 0.15; // Duration of the blink

    const phase = (elapsedTime % cycleTime) / cycleTime;

    if (phase <= (blinkDuration / cycleTime)) {
      nodes.Smile.morphTargetInfluences[0] = 1 // Blink
    } else {
      nodes.Smile.morphTargetInfluences[0] = 0 // Dont blink
    }


    // Let's do something here.
    const x = (pointer.x * viewport.width) /6
    const y = (pointer.y * viewport.height)/6
    meshRef.current.lookAt(x, y, 1)
  })

  return (
    <group {...props} dispose={null} ref={meshRef}>
      <mesh geometry={nodes.Computer_Head.geometry} material={materials.Computer} />
      <mesh geometry={nodes.Cube.geometry} material={materials.Parts} position={[1.995, 0.04, 0.378]} rotation={[-0.41, 0, 0.438]} scale={0.974} />
      {props.expression === 'Angry' &&  <mesh name="Angry" geometry={nodes.Angry.geometry} material={materials.Expression} morphTargetDictionary={nodes.Angry.morphTargetDictionary} morphTargetInfluences={nodes.Angry.morphTargetInfluences} />}
      {props.expression === 'Smile' &&   <mesh name="Smile" geometry={nodes.Smile.geometry} material={materials.Expression} morphTargetDictionary={nodes.Smile.morphTargetDictionary} morphTargetInfluences={nodes.Smile.morphTargetInfluences} />}

      {props.expression === 'Cry' &&  <mesh name="Cry" geometry={nodes.Cry.geometry} material={materials.Expression} morphTargetDictionary={nodes.Cry.morphTargetDictionary} morphTargetInfluences={nodes.Cry.morphTargetInfluences} />}
      
      {props.expression === 'Neutral' &&  <mesh name="Neutral" geometry={nodes.Neutral.geometry} material={materials.Expression} morphTargetDictionary={nodes.Neutral.morphTargetDictionary} morphTargetInfluences={nodes.Neutral.morphTargetInfluences} />
      }
      
      {props.expression === 'Starry' &&   <mesh name="Starry" geometry={nodes.Starry.geometry} material={materials.Expression} morphTargetDictionary={nodes.Starry.morphTargetDictionary} morphTargetInfluences={nodes.Starry.morphTargetInfluences} />
   }
      
      
      </group>
  )
}

useGLTF.preload('/robot-transformed-transformed.glb')
